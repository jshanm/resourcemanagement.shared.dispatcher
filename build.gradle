// Plugin imports
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    ext {
        snippetsDir = file('build/generated-snippets')
        springBootVersion 			= '2.0.3.RELEASE'
        jfrogBuildInfoPluginVersion = '4.4.12'
        dockerPluginVersion 		= '3.0.5'
        spotlessPluginVersion		= '2.4.1'
        sonarGradlePluginVersion	= '2.5'
        datadogVersion			= '1.1.6'
        cloudSleuthVersion = '1.1.2.RELEASE'
        jwtWebTokenNimbusVersion = '4.23'
        dynamodbVersion = '1.11.128'

    }

    repositories {
        maven {
            url 'https://eis.jfrog.io/eis/plugins-release'
            credentials {
                username = project.artifactory_user
                password = project.artifactory_password
            }
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:${jfrogBuildInfoPluginVersion}")
        classpath("com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}")
        classpath("com.diffplug.gradle.spotless:spotless:${spotlessPluginVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarGradlePluginVersion}")
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

//Spring Plugins
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// JFrog Artifactory plugins
apply plugin: 'com.jfrog.artifactory'

apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'org.asciidoctor.convert'

apply plugin: 'com.diffplug.gradle.spotless'

// Compilation settings
sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.ebsco.resourcemanagement.shared'
version = '1.0-SNAPSHOT'

/*repositories {
    mavenCentral()
}*/

ext {
    swaggerVersion 			= '2.6.1'
    springMetricsVersion 	= '3.1.3'
    datadogVersion			= '1.1.6'
}

dependencyManagement {
    imports {
        mavenBom "com.ebsco.starter:ebsco-starter-logging:2.0.0.RELEASE"
        mavenBom "com.ebsco.starter:ebsco-starter-spring-boot:2.0.0.RELEASE"
        mavenBom "com.ebsco.starter:ebsco-starter-swagger:2.0.0.RELEASE"
    }
    dependencies {
        dependency "com.ebsco.common:lib-platform-shared-logging-core:1.3.7.RELEASE"
        dependency "com.ebsco.common:lib-platform-shared-metric-core:1.1.1.RELEASE"
        dependency "com.ebsco.auth.common:lib-auth-shared-response:1.0.2.RELEASE"
    }
}

dependencies {

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-tomcat
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    // https://mvnrepository.com/artifact/org.springframework.security.oauth/spring-security-oauth2
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.3.3.RELEASE'

    //compile group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure', version: '2.0.0.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-oauth2-client
    compileOnly group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: '5.0.6.RELEASE'

    // https://mvnrepository.com/artifact/org.codehaus.httpcache4j.uribuilder/uribuilder
    compile group: 'org.codehaus.httpcache4j.uribuilder', name: 'uribuilder', version: '2.0.0'


    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    //compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'

    // Swagger dependencies
    compile group:'io.springfox', name: 'springfox-swagger2', 	version:"${project.ext['swaggerVersion']}", transitive: true
    compile group:'io.springfox', name: 'springfox-swagger-ui', version:"${project.ext['swaggerVersion']}", transitive: true

    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-dynamodb
    compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: dynamodbVersion

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    //compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'

    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    compile group: 'com.auth0', name: 'java-jwt', version: '2.0.1'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-jwt
    compile group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.0.0.RELEASE'

    // https://mvnrepository.com/artifact/com.nimbusds/nimbus-jose-jwt
    compile group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '5.10'

    // https://mvnrepository.com/artifact/com.nimbusds/oauth2-oidc-sdk
    runtime group: 'com.nimbusds', name: 'oauth2-oidc-sdk', version: '5.62'


}

configurations.all {
    exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    exclude group: "ch.qos.logback", module: "logback-classic"
}

configurations {
    runtime.exclude group:"ch.qos.logback", module: "logback-classic"

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

repositories {

    mavenLocal()
    maven {
        url 'https://eis.jfrog.io/eis/libs-release-local'
        credentials {

            username = project.artifactory_user
            password = project.artifactory_password
        }
    }
    maven {
        url 'https://eis.jfrog.io/eis/libs-release'
        credentials {

            username = project.artifactory_user
            password = project.artifactory_password

        }
    }
}

artifactory {
    //The base Artifactory URL if not overridden by the publisher/resolver
    contextUrl = project.artifactory_contextUrl

    resolve {
        repository {
            repoKey = 'libs-release'
            username = project.artifactory_user
            password = project.artifactory_password
        }
    }

    publish {
        repository {
            repoKey = 'libs-release-local'
            username = project.artifactory_user
            password = project.artifactory_password
            maven = true
        }

        defaults {
            publications ('mavenJava')
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes ) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

////////////////
// Publishing //
////////////////
def isSnapshot = project.version.endsWith('-SNAPSHOT')

// usage: gradle artifactoryPublish
// usage: gradle publishToMavenLocal
// usage: gradle publish
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    if(isSnapshot) {
        logger.info('SNAPSHOT build: '+project.version)
    }

    if(!isSnapshot) {
        logger.info('RELEASE build: '+project.version)
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

// TASK(s)

task integrationTest(type: Test) {

    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }

    mustRunAfter tasks.test
}


tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

test {
    outputs.dir snippetsDir

    testLogging {

        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"

        // set options for log level DEBUG
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }
}

asciidoctor {

    dependsOn integrationTest

    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir

}

jar {

    dependsOn asciidoctor

    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}

// Tasks

task buildImage(type: DockerBuildImage) {

    dependsOn build

    inputDir = file("${projectDir}")
    tag = 'ebsco/resourcemanagement.shared.dispatcher'
}

///////////
// CHECKS
///////////

apply plugin: 'org.sonarqube'
sonarqube {
    properties {
        // Sonar Specific properties
        property "sonar.host.url", "http://sonarqube.eis-platformlive.cloud:9000" // This is the Sonar Server
        property "sonar.projectName", "resourcemanagement.shared.dispatcher"
        property "sonar.projectKey", "resourcemanagement.shared.dispatcher"
        //property 'sonar.exclusions', 'src/main/java/com/ebsco/refurlauth/util/credstash/*,src/main/java/com/ebsco/refurlauth/controller/handler/ResponseWrapperHandler.java,src/main/java/com/ebsco/refurlauth/RefUrlAuthApplication.java,src/main/java/com/ebsco/refurlauth/config/EurekaClientConfig.java,src/main/java/com/ebsco/refurlauth/exception/InternalServerException.java,src/main/java/com/ebsco/refurlauth/config/JacksonConfig.java,src/main/java/com/ebsco/refurlauth/config/MetricsConfig.java,src/main/java/com/ebsco/refurlauth/config/PropertyKeyNames.java,src/main/java/com/ebsco/refurlauth/config/ServiceConfig.java,src/main/java/com/ebsco/refurlauth/config/ServiceConfig.java,src/main/java/com/ebsco/refurlauth/value/BaseModelVO.java,src/main/java/com/ebsco/refurlauth/exception/BadRequestException.java,src/main/java/com/ebsco/refurlauth/value/validation/constraint/CheckEnumeration.java,src/main/java/com/ebsco/refurlauth/value/validation/group/*'
    }
}

//////////////
// Checkstyle
// https://docs.gradle.org/current/userguide/checkstyle_plugin.html
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
//////////////

// usage : gradle checkstyleMain - Runs Checkstyle against the production Java source files.
// usage : gradle checkstyleTest - Runs Checkstyle against the test Java source files.
apply plugin: 'checkstyle'
checkstyle {
    toolVersion = '7.6.1'
    ignoreFailures = true
    configFile = new File(rootDir, "/config/checkstyle/google_checks.xml")
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
        //html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}

////////////
// PMD
// https://docs.gradle.org/current/userguide/pmd_plugin.html
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.PmdExtension.html
////////////

// usage : gradle pmdMain - Runs PMD against the production Java source files.
// usage : gradle pmdTest - Runs PMD against the test Java source files.
apply plugin: 'pmd'
pmd {
    toolVersion = '5.5.5'
    //pmdTest.enabled = true
    ignoreFailures = true
    //targetJdk = '1.7'
    //targetJdk = '1.8'

    //ruleSetFiles = files('path/to/ruleSet.xml')

    ruleSets = [
            'java-android',
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

tasks.withType(Pmd){
    reports{
        xml.enabled=true
        html.enabled=true
    }
}

////////////
// Findbugs
// https://docs.gradle.org/current/userguide/findbugs_plugin.html
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
////////////

// usage : findbugsMain - Runs FindBugs against the production Java source files.
// usage : findbugsTest - Runs FindBugs against the test Java source files.
apply plugin: 'findbugs'
findbugs{
    toolVersion = '3.0.1'
    //findbugsTest.enabled = true
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

////////////
// JaCoCo
// https://docs.gradle.org/current/userguide/jacoco_plugin.html
// https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.plugins.JacocoPluginExtension.html
// https://docs.gradle.org/current/dsl/org.gradle.testing.jacoco.plugins.JacocoTaskExtension.html
////////////

// usage : jacocoTestReport - Generates code coverage report for the test task.
// usage : jacocoTestCoverageVerification - Verifies code coverage metrics based on specified rules for the test task.
apply plugin: 'jacoco'
jacoco { toolVersion = "0.7.9" //reportsDir = file("$buildDir/customJacocoReportDir")
}
